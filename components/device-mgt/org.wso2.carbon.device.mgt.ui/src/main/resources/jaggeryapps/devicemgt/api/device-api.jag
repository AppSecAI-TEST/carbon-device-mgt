<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/device-api.jag");
var constants = require("/app/modules/constants.js");
var deviceModule = require("/app/modules/device.js").deviceModule;
var utility = require("/app/modules/utility.js").utility;
var devicemgtProps = require('/app/conf/devicemgt-props.js').config();
var userModule = require("/app/modules/user.js").userModule;
var serviceInvokers = require("/app/modules/backend-service-invoker.js").backendServiceInvoker;

var CarbonUtils = Packages.org.wso2.carbon.utils.CarbonUtils;
var user = session.get(constants.USER_SESSION_KEY);
var result;

response.contentType = 'application/json';

if (!user) {
    response.sendRedirect("/devicemgt/login?#login-required");
    exit();
} else {
    if (uriMatcher.match("/{context}/api/devices/sketch/download/{downloadId}")) {
        downloadId = uriMatcher.elements().downloadId;
        //Just download the already created zip archive
        var sketchFolder = "repository/resources/sketches";
        var archivesPath = "file://" + CarbonUtils.getCarbonHome() + "/" + sketchFolder + "/archives/" +
                           downloadId + ".zip";
        var zipFile = new File(archivesPath);
        response.addHeader('Content-type', "application/zip, application/octet-stream");
        response.addHeader('Cache-Control', 'public,max-age=12960000');
        response.addHeader("Content-Disposition", "attachment; filename=\"" + downloadId + ".zip\"");

        try {
            zipFile.open('r');
            var stream = zipFile.getStream();
            print(stream);
        } catch (err) {

        } finally {
            if (zipFile != null) {
                zipFile.close();
            }
        }

    } else if (uriMatcher.match("/{context}/api/devices/sketch/download")) {
        //Create a new zip archive and register user calling endpoint

        /* This should match with $CARBON_HOME/repository/resources/sketches/{sketchType} */
        sketchType = request.getParameter("sketchType");
        /* This should be registered device type of the CDMF(Connected Device Management Framework) */
        deviceType = request.getParameter("deviceType");
        deviceName = request.getParameter("deviceName");

        if (!sketchType) {
            log.error("Sketch Type is empty!");
            // HTTP status code 400 refers to - Bad request.
            result = 400;
        } else {
            /**
             URL: {serverURL}/{deviceType}/{downloadAgentUri}?owner={username}&deviceName={deviceName}
             {serverURL} - devicemgt/app/conf/config.json
             {deviceType} - from the request
             {downloadAgentUri} - device_type_specific_unit/private/conf/device-type.json
             {username} - from request
             {deviceName} - from request
             **/

            var sketchDownloadEndPoint = devicemgtProps["httpsURL"] + "/" + deviceType + "/devices/download";
            deviceTypeConfig = utility.getDeviceTypeConfig(deviceType);

            if (deviceTypeConfig && deviceTypeConfig.deviceType.downloadAgentUri) {
                sketchDownloadEndPoint = deviceTypeConfig.deviceType.downloadAgentUri;
            }
            var tokenPair = session.get(constants.ACCESS_TOKEN_PAIR_IDENTIFIER);
            if (tokenPair) {
                response.addHeader(constants.AUTHORIZATION_HEADER, constants.BEARER_PREFIX + tokenPair.accessToken);
                response.sendRedirect(sketchDownloadEndPoint + "?sketchType=" + sketchType + "&deviceName="
                                      + deviceName);
            } else {
                response.sendRedirect(devicemgtProps["httpsURL"] + "/devicemgt/login");
                exit();
            }
        }

    } else if (uriMatcher.match("/{context}/api/devices/sketch/generate_link")) {

        var contents = request.getContent();
        sketchType = contents.sketchType;
        deviceType = contents.deviceType;
        deviceName = contents.deviceName;
        generateLink = contents.generateLink;

        if (!sketchType) {
            log.error("Sketch Type is empty!");
            // HTTP status code 400 refers to - Bad request.
            result = 400;
        } else {

            /**
             URL: {serverURL}/{deviceType}/{downloadAgentUri}?owner={username}&deviceName={deviceName}
             {serverURL} - devicemgt/app/conf/config.json
             {deviceType} - from the request
             {downloadAgentUri} - device_type_specific_unit/private/conf/device-type.json
             {username} - from request
             {deviceName} - from request
             **/

            deviceManagerService = devicemgtProps["httpsURL"] + "/" + deviceType + "_mgt" + "/manager";
            sketchGenerateLinkEndPoint = deviceManagerService + "/device/" + sketchType + "/generate_link";
            var deviceTypeConfig = utility.getDeviceTypeConfig(deviceType);
            //replace download endpoint
            if (deviceTypeConfig && deviceTypeConfig.deviceType.downloadAgentLinkGenUri) {
                sketchGenerateLinkEndPoint = devicemgtProps["httpsURL"] + "/" + deviceType + "_mgt" +
                                             "/" + deviceTypeConfig.deviceType.downloadAgentLinkGenUri;
            }

            var fileId = get(sketchGenerateLinkEndPoint + "?owner=" + user.username + "&deviceName=" +
                             deviceName, null, "text");
            result = "curl -k " + devicemgtProps["httpsURL"] + constants.WEB_APP_CONTEXT +
                     "/api/devices/sketch/download/" + fileId.data;
        }

    } else if (uriMatcher.match("/{context}/api/devices/all")) {
        result = deviceModule.getOwnDevices();

    } else if (uriMatcher.match("/{context}/api/devices/count")) {
        var count = deviceModule.getOwnDevicesCount().data;
        result = count.toString();

    } else if (uriMatcher.match("/{context}/api/devices/types")) {
        result = deviceModule.listDeviceTypes();

    } else if (uriMatcher.match("/{context}/api/devices/{deviceType}/{deviceId}/remove")) {
        var elements = uriMatcher.elements();
        var deviceId = elements.deviceId;
        var deviceType = elements.deviceType;
        result = deviceModule.removeDevice(deviceType, deviceId);

    } else if (uriMatcher.match("/{context}/api/devices/{deviceType}/{deviceId}/update")) {
        var elements = uriMatcher.elements();
        var deviceId = elements.deviceId;
        var deviceType = elements.deviceType;
        var deviceName = request.getParameter("name");
        result = deviceModule.updateDevice(deviceType, deviceId, deviceName);
    } else if (uriMatcher.match("/{context}/api/devices")) {
        var url = request.getParameter("url");
        var draw = request.getParameter("draw");
        var length = request.getParameter("length");
        var start = request.getParameter("start");
        var search = request.getParameter("search[value]");
        var deviceName = request.getParameter("columns[1][search][value]");
        var owner = request.getParameter("columns[2][search][value]");
        var status = request.getParameter("columns[3][search][value]");
        var platform = request.getParameter("columns[4][search][value]");
        var ownership = request.getParameter("columns[5][search][value]");
        var targetURL;

        function appendQueryParam (url, queryParam , value) {
            if (url.indexOf("?") > 0) {
                return url + "&" + queryParam + "=" + value;
            }
            return url + "?" + queryParam + "=" + value;
        }
        targetURL = devicemgtProps.httpsURL + request.getParameter("url");
        targetURL = appendQueryParam(targetURL, "draw", draw);
        targetURL = appendQueryParam(targetURL, "start", start);
        targetURL = appendQueryParam(targetURL, "length", length);

        if (search && search !== "") {
            targetURL = appendQueryParam(targetURL, "search", search);
        }

        if (deviceName && deviceName !== "") {
            targetURL = appendQueryParam(targetURL, "device-name", deviceName);
        }

        if (owner && owner !== "") {
            targetURL = appendQueryParam(targetURL, "user", owner);
        }

        if (status && status !== "") {
            targetURL = appendQueryParam(targetURL, "status", status);
        }

        if (platform && platform !== "") {
            targetURL = appendQueryParam(targetURL, "type", platform);
        }

        if (ownership && ownership !== "") {
            targetURL = appendQueryParam(targetURL, "ownership", ownership);
        }

        serviceInvokers.XMLHttp.get(
                targetURL, function (responsePayload) {
                    response.status = 200;
                    result =  responsePayload;
                },
                function (responsePayload) {
                    response.status = responsePayload.status;
                    result =  responsePayload.responseText;
                });
    } else if (uriMatcher.match("/{context}/api/devices/")) {
        if (userModule.isAuthorized("/permission/admin/device-mgt/admin/devices/list")) {
            result = deviceModule.listDevices();
        } else {
            response.sendError(403);
        }
    } else if (uriMatcher.match("/{context}/api/devices/{type}/{deviceId}")) {
        elements = uriMatcher.elements();
        deviceId = elements.deviceId;
        type = elements.type;
        if (userModule.isAuthorized("/permission/admin/device-mgt/admin/devices/list")) {
            result = deviceModule.viewDevice(type, deviceId);
        }else {
            response.sendError(403);
        }
    } else if (uriMatcher.match("{context}/api/devices/{type}/{deviceId}/{operation}")) {
        elements = uriMatcher.elements();
        deviceId = elements.deviceId;
        type = elements.type;
        operation = elements.operation;
        if (userModule.isAuthorized("/permission/admin/device-mgt/admin/devices/operation")) {
            result = deviceModule.performOperation(deviceId, operation, [], type);
        } else {
            response.sendError(403);
        }
    }
}

// Returning the result.
if (result) {
    print(result);
}

%>