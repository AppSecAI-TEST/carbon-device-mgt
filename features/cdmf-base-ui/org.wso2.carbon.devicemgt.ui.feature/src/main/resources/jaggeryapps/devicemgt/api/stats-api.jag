<%
/*
 * Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var uri = request.getRequestURI();
var uriMatcher = new URIMatcher(String(uri));

var log = new Log("api/stats-api.jag");

var from = request.getParameter("from");
var to = request.getParameter("to");

var constants = require("/app/modules/constants.js");
var utility = require("/app/modules/utility.js").utility;
var devicemgtProps = require('/app/conf/devicemgt-props.js').config();

var deviceCloudGroupService = devicemgtProps["httpsURL"] + "/common/group_manager";
var deviceCloudDeviceService = devicemgtProps["httpsURL"] + "/common/device_manager";
var deviceCloudStatsService = devicemgtProps["httpsURL"] + "/common/stats_manager";

var stats = {};
var deviceId;
var deviceType;

var responseProcessor = require('utils').response;
response.contentType = 'application/json';

var user = session.get(constants.USER_SESSION_KEY);

if (!user) {
    response = responseProcessor.buildErrorResponse(response, 401, "Unauthorized");
} else {
    if (uriMatcher.match("/{context}/api/stats")) {
        deviceId = request.getParameter("deviceId");
        deviceType = request.getParameter("deviceType");

        getDeviceData(deviceType, deviceId);

    } else if (uriMatcher.match("/{context}/api/stats/group")) {
        var groupId = request.getParameter("groupId");

        //URL: GET https://localhost:9443/devicecloud/group_manager/group/id/{groupId}/device/all
        var endPoint = deviceCloudGroupService + "/group/id/" + groupId + "/device/all";
        var data = {"username": user};
        var devices = get(endPoint, data, "json").data;

        for (var device in devices) {
            deviceId = devices[device].deviceIdentifier;
            deviceType = devices[device].type;
            getDeviceData(deviceType, deviceId);
        }
    }
    log.info(stats);
    // returning the result.
    if (stats) {
        print(stats);
    }
}

function getDeviceData(deviceType, deviceId) {
    //URL: GET https://localhost:9443/devicecloud/device_manager/device/type/{type}/identifier/{identifier}
    var endPoint = deviceCloudDeviceService + "/device/type/" + deviceType + "/identifier/" + deviceId;
    var data = {"username": user};
    var device = get(endPoint, data, "json").data;
    log.info(device);
    if (!device) {
        return;
    }
    var uname = device.enrolmentInfo.owner;
    switch (deviceType) {
        case "firealarm":
            getFireAlarmData(uname, device, from, to);
            break;
        case "virtual_firealarm":
            getVirtualFireAlarmData(uname, device, from, to);
            break;
        case "sensebot":
            getSensebotData(uname, device, from, to);
            break;
        case "arduino":
            getArduinoData(uname, device, from, to);
            break;
        case "digital_display":
            getDigitalDisplayData(uname, device, from, to);
            break;
        case "android_sense":
            getAndroidSenseData(uname, device, from, to);
            break;
        case "raspberrypi":
            getDigitalDisplayData(uname, device, from, to);
            break;
        default:
            getAllDeviceData(uname, device, from, to);
    }
}

function getFireAlarmData(user, device, from, to) {
    if (stats['temperatureData'] == null) {
        stats['temperatureData'] = [];
    }
    if (stats['sonarData'] == null) {
        stats['sonarData'] = [];
    }
    if (stats['motionData'] == null) {
        stats['motionData'] = [];
    }
    if (stats['lightData'] == null) {
        stats['lightData'] = [];
    }
    stats['temperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['sonarData'].push({
        "device": device.name,
        "stats": getSensorData("SONAR_SENSOR_SUMMARY", "sonar", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['motionData'].push({
        "device": device.name,
        "stats": getSensorData("PIR_MOTION_SENSOR_SUMMARY", "motion", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['lightData'].push({
        "device": device.name,
        "stats": getSensorData("LDR_LIGHT_SENSOR_SUMMARY", "light", user, device.type, device.deviceIdentifier, from, to)
    });
}

function getVirtualFireAlarmData(user, device, from, to) {
    if (stats['temperatureData'] == null) {
        stats['temperatureData'] = [];
    }
    if (stats['humidityData'] == null) {
        stats['humidityData'] = [];
    }
    if (stats['lightData'] == null) {
        stats['lightData'] = [];
    }

    /*
    var timeInterval = 30;
    var rnd, chartData = [];
    var i = parseInt(from);
    while (i < parseInt(to)) {
        rnd = Math.floor(Math.random() * (50 - 20) + 20);
        chartData.push({time: i, value: rnd});
        i += timeInterval;
    }
    stats['temperatureData'].push({"device": device.name, "stats": chartData});
     */

    stats['temperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });

    stats['humidityData'].push({
        "device": device.name,
        "stats": []
    });
    stats['lightData'].push({
        "device": device.name,
        "stats": []
    });
}

function getSensebotData(user, device, from, to) {

    if (stats['sonarData'] == null) {
        stats['sonarData'] = [];
    }
    if (stats['motionData'] == null) {
        stats['motionData'] = [];
    }
    if (stats['lightData'] == null) {
        stats['lightData'] = [];
    }
    if (stats['temperatureData'] == null) {
        stats['temperatureData'] = [];
    }

    stats['sonarData'].push({
        "device": device.name,
        "stats": getSensorData("SONAR_SENSOR_SUMMARY", "sonar", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['motionData'].push({
        "device": device.name,
        "stats": getSensorData("PIR_MOTION_SENSOR_SUMMARY", "motion", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['lightData'].push({
        "device": device.name,
        "stats": getSensorData("LDR_LIGHT_SENSOR_SUMMARY", "light", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['temperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });
}

function getArduinoData(user, device, from, to) {
    if (stats['temperatureData'] == null) {
        stats['temperatureData'] = [];
    }

    stats['temperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });
}

function getAndroidSenseData(user, device, from, to) {
    if (stats['lightData'] == null){
        stats['lightData'] = [];
    }
    if (stats['pressureData'] == null){
        stats['pressureData'] = [];
    }
    if (stats['proximityData'] == null){
        stats['proximityData'] = [];
    }
    if (stats['accelerometerData'] == null){
        stats['accelerometerData'] = [];
    }
    if (stats['gravityData'] == null){
        stats['gravityData'] = [];
    }
    if (stats['gyroscopeData'] == null){
        stats['gyroscopeData'] = [];
    }
    if (stats['rotationData'] == null){
        stats['rotationData'] = [];
    }
    if (stats['batteryData'] == null){
        stats['batteryData'] = [];
    }
    if (stats['magneticData'] == null){
        stats['magneticData'] = [];
    }
    stats['batteryData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_BATTERY_SUMMARY", "battery", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['accelerometerData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_ACCELEROMETER_SUMMARY", "accelerometer", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['proximityData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_PROXIMITY_SUMMARY", "proximity", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['pressureData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_PRESSURE_SUMMARY", "pressure", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['lightData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_LIGHT_SUMMARY", "light", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['gyroscopeData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_GYROSCOPE_SUMMARY", "gyroscope", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['rotationData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_ROTATION_SUMMARY", "rotation", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['magneticData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_MAGNETIC_SUMMARY", "magnetic", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['gravityData'].push({
       "device": device.name,
       "stats": getSensorData("DEVICE_GRAVITY_SUMMARY", "gravity", user, device.type, device.deviceIdentifier, from, to)
    });
}

function getDigitalDisplayData(user, device, from, to) {
    if (stats['ramData'] == null) {
        stats['ramData'] = [];
    }
    if (stats['cpuData'] == null) {
        stats['cpuData'] = [];
    }
    if (stats['cpuTemperatureData'] == null) {
        stats['cpuTemperatureData'] = [];
    }
    stats['ramData'].push({
        "device": device.name,
        "stats": getSensorData("RAM_USAGE_SUMMARY", "motion", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['cpuData'].push({
        "device": device.name,
        "stats": getSensorData("CPU_LOAD_SUMMARY", "light", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['cpuTemperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_CPU_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });
}

function getAllDeviceData(user, device, from, to) {
    if (stats['ramData'] == null) {
        stats['ramData'] = [];
    }
    if (stats['cpuData'] == null) {
        stats['cpuData'] = [];
    }
    if (stats['temperatureData'] == null) {
        stats['temperatureData'] = [];
    }
    if (stats['sonarData'] == null) {
        stats['sonarData'] = [];
    }
    if (stats['motionData'] == null) {
        stats['motionData'] = [];
    }
    if (stats['lightData'] == null) {
        stats['lightData'] = [];
    }
    if (stats['cpuTemperatureData'] == null) {
        stats['cpuTemperatureData'] = [];
    }

    //Uncomment to disable data emulation

     var timeInterval = 30;
     var rnd, chartData = [];
     var i = parseInt(from);
     while (i < parseInt(to)) {
     rnd = Math.random() * (512 - 128) + 128;
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['ramData'].push({"device": device.name, "stats": chartData});

     i = parseInt(from);
     chartData = [];
     while (i < parseInt(to)) {
     rnd = Math.random() * 100;
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['cpuData'].push({"device": device.name, "stats": chartData});

     i = parseInt(from);
     chartData = [];
     while (i < parseInt(to)) {
     rnd = Math.random() * (27 - 24) + 24;
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['temperatureData'].push({"device": device.name, "stats": chartData});

     i = parseInt(from);
     chartData = [];
     while (i < parseInt(to)) {
     rnd =  Math.random() * 50;
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['sonarData'].push({"device": device.name, "stats": chartData});

     i = parseInt(from);
     chartData = [];
     while (i < parseInt(to)) {
     rnd = Math.round(Math.random());
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['motionData'].push({"device": device.name, "stats": chartData});

     i = parseInt(from);
     chartData = [];
     while (i < parseInt(to)) {
     rnd = Math.round(Math.random());
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['lightData'].push({"device": device.name, "stats": chartData});

     i = parseInt(from);
     chartData = [];
     while (i < parseInt(to)) {
     rnd = Math.random() * (50 - 30) + 30;
     chartData.push({time: i, value: rnd});
     i += timeInterval;
     }
     stats['cpuTemperatureData'].push({"device": device.name, "stats": chartData});


    //Comment to enable data emulation
    /*
    stats['ramData'].push({
        "device": device.name,
        "stats": getSensorData("RAM_USAGE_SUMMARY", "motion", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['cpuData'].push({
        "device": device.name,
        "stats": getSensorData("CPU_LOAD_SUMMARY", "light", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['sonarData'].push({
        "device": device.name,
        "stats": getSensorData("SONAR_SENSOR_SUMMARY", "sonar", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['motionData'].push({
        "device": device.name,
        "stats": getSensorData("PIR_MOTION_SENSOR_SUMMARY", "motion", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['lightData'].push({
        "device": device.name,
        "stats": getSensorData("LDR_LIGHT_SENSOR_SUMMARY", "light", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['temperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });
    stats['cpuTemperatureData'].push({
        "device": device.name,
        "stats": getSensorData("DEVICE_CPU_TEMPERATURE_SUMMARY", "TEMPERATURE", user, device.type, device.deviceIdentifier, from, to)
    });
    */
}


function getSensorData(table, column, user, type, deviceIdentifier, from, to) {

    var fetchedData = [];

    try {
        ///stats/device/type/{type}/identifier/{identifier}
        var endPoint = deviceCloudStatsService + "/stats/device/type/" + type + "/identifier/" + deviceIdentifier;
        var query = "?table=" + encodeURIComponent(table)
                    + "&column=" + encodeURIComponent(column)
                    + "&username=" + encodeURIComponent(user)
                    + "&from=" + from
                    + "&to=" + to;
        endPoint = endPoint + query;
        fetchedData = get(endPoint, {}, "json").data;
        return fetchedData;
    } catch (error) {
        log.error(error);
    }
}

%>
